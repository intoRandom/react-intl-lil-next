3:"$Sreact.fragment"
4:I[6450,["571","static/chunks/571-6524f00af8de67dd.js","185","static/chunks/app/layout-d14a342a9f935562.js"],"LangProvider",1]
5:I[933,["571","static/chunks/571-6524f00af8de67dd.js","185","static/chunks/app/layout-d14a342a9f935562.js"],"default",1]
6:I[9275,[],""]
7:I[1343,[],""]
8:I[6513,[],"ClientPageRoot"]
9:I[6774,["974","static/chunks/974-e7a36d8cad9c7362.js","931","static/chunks/app/page-ad19b2c132eccf6a.js"],"default",1]
c:I[3120,[],"OutletBoundary"]
e:I[3120,[],"MetadataBoundary"]
10:I[3120,[],"ViewportBoundary"]
12:I[6130,[],""]
1:HL["/_next/static/media/f20c3749fc6b6920-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
2:HL["/_next/static/css/7e9a0d0d8c1d2f37.css","style"]
0:{"P":null,"b":"y2izXg87NnTp8fwUV_x6x","p":"","c":["",""],"i":false,"f":[[["",{"children":["__PAGE__",{}]},"$undefined","$undefined",true],["",["$","$3","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/7e9a0d0d8c1d2f37.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__className_6c785e antialiased","children":["$","$L4",null,{"langConfig":{"defaultLang":"en","mode":"local","languages":[{"en":{"home":{"title":"react-intl-lil","subtitle":"The Easiest Static Internationalization for React and Next.js","developer":"Developed by ","sum":{"title":"Summary","data":"This guide shows the implementation of react-intl-lil on a static website developed with next js and typescript. This website was developed with the technologies mentioned in this guide, you can find the source code in the following ","repository":"repository"},"inst":{"title":"Installation","data":"react-intl-lil can easily be installed by:"},"config":{"title":"Configuration","data":"react-intl-lil just need the following files:","files":[{"data":"Language, these files contains the information corresponding to each language","file":"@/lang/messages/en.ts \n\nconst data = { \n  home: { \n    title: \"Welcome to react-intl-lil\", \n    // {{Dynamic values}} support \n    version: \"Current version: {{version}}\", \n    // Array support\n    features:[ \n      {title:\"Multi language\", data:\"Single and multi language support\"} \n      {title:\"Local Storage\", data:\"For persistence across sessions\"} \n    ] \n  }, \n};\nexport default data;"},{"data":"Configuration, this file will have the following structure and is used to select the following properties:","file":"@/lang/config.ts \n\nimport { LangConfigType } from \"react-intl-lil\"; \n\n// Import yours language files \nimport es from \"./messages/es\"; \nimport en from \"./messages/en\"; \n\nexport const langConfig: LangConfigType = { \n  defaultLang: \"en\", \n  // mode: \"local\" for local storage \n  // mode: \"single\" for single language support \n  mode: \"local\", \n  languages: [{ en: en }, { es: es }],\n};"},{"data":"Container, this should be located at the root of the project and must include a reference to the configuration file","file":"@/app/layout.tsx \n\n... \nimport { LangProvider } from \"react-intl-lil\"; \nimport { langConfig } from \"@/lang/config\"; \n\nexport default function RootLayout({ \n  children, \n}: Readonly<{ \n  children: React.ReactNode; \n}>) { \n   return ( \n    <html lang={langConfig.defaultLang}> \n      <body > \n        <LangProvider getLanguageConfig={langConfig}> \n          {children} \n        </LangProvider> \n      </body> \n    </html> \n  ); \n}"},{"data":"That is all it takes to give your static project support for multiple languages. For get the strings or arrays for each language just use the hook useLanguage inside a component","file":"\"use client\"; \n\nimport { useLanguage } from \"react-intl-lil\"; \n\n const UseHooks = () => { \n  const { gs, ga, getLanguage, setLanguage } = useLanguage(); \n\n  return ( \n    <section> \n      {/* this return the current language */} \n      <h1>{getLanguage}</h1> \n\n      {/* this button change the current language */} \n      <button onClick={()=>setLanguage(\"es\")}>Change Language</button> \n\n      {/* this return a string */} \n      <h2>{gs(\"home.title\")}</h2> \n\n      {/* this return a string with a dynamic value*/} \n      <p>{gs(\"home.version\", { version: \"1.1.1\" })}</p> \n\n      {/* this return an array */} \n      <ul> \n        {ga(\"home.features\").map((item) => ( \n          <li key={item.title}> \n            <h2>{item.title}</h2> \n            <p>{item.data}</p> \n          </li> \n        ))} \n      </ul> \n    </section> \n  ); \n}; \n\nexport default UseHooks; \n"}]},"final":"I hope this package is useful to you. I am running out of energy but not desire. If you want to help me continue on my path, consider gifting me a coffee."}}},{"es":{"home":{"title":"react-intl-lil","subtitle":"La internacionalización estática más sencilla para React y Next.js","developer":"Desarrollado por ","sum":{"title":"Resumen","data":"En esta se guía se muestra la implementación de react-intl-lil en un sitio web estático desarrollado con next js y typescript. Esta pagina web fue desarrollado con las tecnologías mencionadas en esta guía, puedes encontrar el código fuente en el siguiente ","repository":"repositorio"},"inst":{"title":"Instalación","data":"react-intl-lil se puede instalar fácilmente mediante:"},"config":{"title":"Configuración","data":"react-intl-lil solo necesita los siguientes archivos","files":[{"data":"Lenguaje, estos archivos contendrán la información correspondiente a cada idioma","file":"@/lang/messages/es.ts \n\nconst data = { \n  home: { \n    title: \"Bienvenido a react-intl-lil\", \n    // Soporte para {{valores dinámicos}} \n    version: \"Versión actual: {{version}}\", \n    // Soporte para arreglos\n    features:[ \n      {title:\"Multi lenguaje\", data:\"Soporte para uno o mas lenguajes\"} \n      {title:\"Local Storage\", data:\"Para persistencia entre sesiones\"} \n    ] \n  }, \n};\nexport default data;"},{"data":"Configuración, este archivo tendrá la siguiente estructura y se utiliza para seleccionar las siguientes propiedades:","file":"@/lang/config.ts \n\nimport { LangConfigType } from \"react-intl-lil\"; \n\n// Importa tus archivos de idioma \nimport es from \"./messages/es\"; \nimport en from \"./messages/en\"; \n\nexport const langConfig: LangConfigType = { \n  defaultLang: \"es\", \n  // mode: \"local\" para local storage \n  // mode: \"single\" para soporte de un solo idioma \n  mode: \"local\", \n  languages: [{ es: es }, { en: en }],\n};"},{"data":"Contenedor, este deberá ubicarse en la raíz del proyecto y deberá incluir una referencia hacia el archivo de configuración","file":"@/app/layout.tsx \n\n... \nimport { LangProvider } from \"react-intl-lil\"; \nimport { langConfig } from \"@/lang/config\"; \n\nexport default function RootLayout({ \n  children, \n}: Readonly<{ \n  children: React.ReactNode; \n}>) { \n   return ( \n    <html lang={langConfig.defaultLang}> \n      <body > \n        <LangProvider getLanguageConfig={langConfig}> \n          {children} \n        </LangProvider> \n      </body> \n    </html> \n  ); \n}"},{"data":"Eso es todo lo que se necesita para que su proyecto estático admita varios idiomas. Para obtener strings o arrays para cada idioma, simplemente use el hook useLanguage dentro de un componente.","file":"\"use client\"; \n\nimport { useLanguage } from \"react-intl-lil\"; \n\n const UseHooks = () => { \n  const { gs, ga, getLanguage, setLanguage } = useLanguage(); \n\n  return ( \n    <section> \n      {/* esto devuelve el lenguaje actual */} \n      <h1>{getLanguage}</h1> \n\n      {/* este botón cambia el lenguaje actual */} \n      <button onClick={()=>setLanguage(\"en\")}>Cambiar Lenguaje</button> \n\n      {/* esto devuelve un string */} \n      <h2>{gs(\"home.title\")}</h2> \n\n      {/* esto devuelve un string con un valor dinámico*/} \n      <p>{gs(\"home.version\", { version: \"1.1.1\" })}</p> \n\n      {/* esto devuelve un array */} \n      <ul> \n        {ga(\"home.features\").map((item) => ( \n          <li key={item.title}> \n            <h2>{item.title}</h2> \n            <p>{item.data}</p> \n          </li> \n        ))} \n      </ul> \n    </section> \n  ); \n}; \n\nexport default UseHooks; \n"}]},"final":"Espero que este paquete sea de utilidad para ti. Me estoy quedando sin energía pero no sin ganas. Si quieres ayudarme a seguir en mi camino, considera regalarme un café"}}}]},"children":[["$","$L5",null,{}],["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]]}]}]}]]}],{"children":["__PAGE__",["$","$3","c",{"children":[["$","$L8",null,{"Component":"$9","searchParams":{},"params":{},"promises":["$@a","$@b"]}],null,["$","$Lc",null,{"children":"$Ld"}]]}],{},null]},null],["$","$3","h",{"children":[null,["$","$3","xlCwQeILXv3IBcJ_WOMoP",{"children":[["$","$Le",null,{"children":"$Lf"}],["$","$L10",null,{"children":"$L11"}],["$","meta",null,{"name":"next-size-adjust"}]]}]]}]]],"m":"$undefined","G":"$12","s":false,"S":true}
b:{}
a:{}
11:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
f:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"react-intl-lil"}],["$","meta","2",{"name":"description","content":"The Easiest Static Internationalization for React and Next.js"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
d:null
